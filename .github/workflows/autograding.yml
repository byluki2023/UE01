name: Autograding Tests

on:
  push:
    branches:
      - main
  repository_dispatch:

permissions:
  checks: write
  actions: read
  contents: read

jobs:
  run-autograding-tests:
    runs-on: ubuntu-latest
    if: github.actor != 'github-classroom[bot]'

    steps:
      - name: Checkout Student Repo Code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Checkout Tests Repo
        uses: actions/checkout@v4
        with:
          repository: byluki2023/UE01_AllTests
          path: tests

      - name: Build & install Student Project
        run: mvn clean install --batch-mode

      # ---- SONARQUBE ANALYSE ----
      - name: SonarQube Analysis
        id: sonarqubecheck
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: SonarQubeCheck
          setup-command: ""
          command: |
            mvn sonar:sonar \
              -Dsonar.projectKey=byluki2023_UE01_noTests-${{ github.event.repository.name }} \
              -Dsonar.organization=byluki2023 \
              -Dsonar.host.url=https://sonarcloud.io \
              -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
              --batch-mode
          timeout: 10
          max-score: 0

      # ---- ADVANCED SONARQUBE QUALITY CHECK ----
      - name: Advanced Code Quality Test
        id: advancedcodequalitytest
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: Advanced Code Quality Test
          setup-command: |
            sudo apt-get update && sudo apt-get install -y jq bc
          command: |
            PROJECT_KEY="byluki2023_UE01_noTests-${{ github.event.repository.name }}"

            CODE_SMELLS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
              "https://sonarcloud.io/api/measures/component?component=$PROJECT_KEY&metricKeys=code_smells" \
              | jq -r '.component.measures[0].value // "0"')

            BUGS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
              "https://sonarcloud.io/api/measures/component?component=$PROJECT_KEY&metricKeys=bugs" \
              | jq -r '.component.measures[0].value // "0"')

            VULNERABILITIES=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
              "https://sonarcloud.io/api/measures/component?component=$PROJECT_KEY&metricKeys=vulnerabilities" \
              | jq -r '.component.measures[0].value // "0"')

            MAINTAINABILITY=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
              "https://sonarcloud.io/api/measures/component?component=$PROJECT_KEY&metricKeys=sqale_rating" \
              | jq -r '.component.measures[0].value // "5"')

            # Defaults setzen, falls leer
            CODE_SMELLS=${CODE_SMELLS:-0}
            BUGS=${BUGS:-0}
            VULNERABILITIES=${VULNERABILITIES:-0}
            MAINTAINABILITY=${MAINTAINABILITY:-5}

            echo "Code Smells: $CODE_SMELLS"
            echo "Bugs: $BUGS"
            echo "Vulnerabilities: $VULNERABILITIES"
            echo "Maintainability Rating: $MAINTAINABILITY"

            SCORE=0

            if [ "$CODE_SMELLS" -le 1 ]; then SCORE=$((SCORE + 1)); fi
            if [ "$BUGS" -eq 0 ]; then SCORE=$((SCORE + 1)); fi
            if [ "$VULNERABILITIES" -eq 0 ]; then SCORE=$((SCORE + 1)); fi
            if [ "$MAINTAINABILITY" -le 2 ]; then SCORE=$((SCORE + 1)); fi

            echo "Quality Score: $SCORE/4"

            if [ $SCORE -ge 3 ]; then
              echo "✅ Excellent code quality!"
              exit 0
            else
              echo "❌ Code quality needs improvement"
              exit 1
            fi
          timeout: 10
          max-score: 4

      # ---- TEST CASES ----
      - name: TicTacToeTest
        id: tictactoetest
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: TicTacToeTest
          setup-command: ""
          command: cd tests && mvn test -Dtest=A01_TicTacToeTest --batch-mode
          timeout: 5
          max-score: 4

      - name: EinfacheRechnungenTest
        id: einfacherechnungentest
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: EinfacheRechnungenTest
          setup-command: ""
          command: cd tests && mvn test -Dtest=A02_EinfacheRechnungenTest --batch-mode
          timeout: 5
          max-score: 4

      - name: LohnberechnungenTest
        id: lohnberechnungentest
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: LohnberechnungenTest
          setup-command: ""
          command: cd tests && mvn test -Dtest=A03_LohnberechnungenTest --batch-mode
          timeout: 5
          max-score: 4

      - name: BetriebskostenrechnerTest
        id: betriebskostenrechnertest
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: BetriebskostenrechnerTest
          setup-command: ""
          command: cd tests && mvn test -Dtest=A04_BetriebskostenrechnerTest --batch-mode
          timeout: 5
          max-score: 4

      - name: AngebotserstellungTest
        id: angebotserstellungtest
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: AngebotserstellungTest
          setup-command: ""
          command: cd tests && mvn test -Dtest=A05_AngebotserstellungTest --batch-mode
          timeout: 5
          max-score: 4

      - name: Wechselgeld_BerechnungTest
        id: wechselgeld_berechnungtest
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: Wechselgeld_BerechnungTest
          setup-command: ""
          command: cd tests && mvn test -Dtest=A06_Wechselgeld_BerechnungTest --batch-mode
          timeout: 5
          max-score: 4

      - name: Autograding Reporter
        uses: classroom-resources/autograding-grading-reporter@v1
        env:
          SONARQUBECHECK_RESULTS: "${{steps.sonarqubecheck.outputs.result}}"
          ADVANCEDCODEQUALITYTEST_RESULTS: "${{steps.advancedcodequalitytest.outputs.result}}"
          TICTACTOETEST_RESULTS: "${{steps.tictactoetest.outputs.result}}"
          EINFACHERECHNUNGENTEST_RESULTS: "${{steps.einfacherechnungentest.outputs.result}}"
          LOHNBERECHNUNGENTEST_RESULTS: "${{steps.lohnberechnungentest.outputs.result}}"
          BETRIEBSKOSTENRECHNERTEST_RESULTS: "${{steps.betriebskostenrechnertest.outputs.result}}"
          ANGEBOTSERSTELLUNGTEST_RESULTS: "${{steps.angebotserstellungtest.outputs.result}}"
          WECHSELGELD_BERECHNUNGTEST_RESULTS: "${{steps.wechselgeld_berechnungtest.outputs.result}}"
        with:
          runners: sonarqubecheck,advancedcodequalitytest,tictactoetest,einfacherechnungentest,lohnberechnungentest,betriebskostenrechnertest,angebotserstellungtest,wechselgeld_berechnungtest
